openapi: 3.0.0
info:
  title: Social Media API
  description: API documentation for social media platform with role-based access control
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, moderator, admin]
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  newUser:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
                  token:
                    type: string
        400:
          description: Validation error or user already exists
        500:
          description: Server error

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  message:
                    type: string
        400:
          description: Invalid credentials
        404:
          description: User not found
        500:
          description: Server error

  /api/posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        401:
          description: Unauthorized
        403:
          description: Permission denied
        500:
          description: Server error

    post:
      tags:
        - Posts
      summary: Create a new post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                  maxLength: 100
                content:
                  type: string
                  maxLength: 5000
      responses:
        201:
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        401:
          description: Unauthorized
        403:
          description: Permission denied
        500:
          description: Server error

  /api/posts/{id}:
    delete:
      tags:
        - Posts
      summary: Delete a post
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Post ID
      responses:
        200:
          description: Post deleted successfully
        401:
          description: Unauthorized
        403:
          description: Permission denied
        404:
          description: Post not found
        500:
          description: Server error

  /api/users:
    get:
      tags:
        - Admin
      summary: Get all users (Admin only)
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
        403:
          description: Permission denied
        500:
          description: Server error

  /api/users/role:
    patch:
      tags:
        - Admin
      summary: Update user role (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - role
              properties:
                userId:
                  type: string
                role:
                  type: string
                  enum: [user, moderator, admin]
      responses:
        200:
          description: User role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: Invalid role
        401:
          description: Unauthorized
        403:
          description: Permission denied
        404:
          description: User not found
        500:
          description: Server error
